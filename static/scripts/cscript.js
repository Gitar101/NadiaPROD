document.addEventListener("DOMContentLoaded",(()=>{const e=document.getElementById("user-input"),t=document.getElementById("message"),s=document.getElementById("send"),n=document.getElementById("chat"),o=document.getElementById("modern-open-settings"),a=document.getElementById("cli-open-settings");const r=document.getElementById("settings-popup"),l=document.getElementById("close-settings"),i=document.getElementById("custom-prompt-input"),c=document.getElementById("submit-prompt"),d=new Map,p=document.getElementById("reset-prompt"),m=document.getElementById("preset-dropdown"),y=document.getElementById("theme-dropdown");y.value;let u=!1,g=!1;function h(){const e=m.value;i.disabled="custom"!==e,i.value=""}async function E(){const e=t.value.trim();if(""!==e){u=!0,t.disabled=!0,s.disabled=!0,f(username,e.replace(/\n/g,"<br>"),"user"),t.value="";try{if(e.toLowerCase().startsWith("image ")||e.toLowerCase().startsWith("generate ")){if(!g||"imagesys.txt"!==currentPromptFile){if(!(await fetch("/change_prompt",{method:"POST",headers:{"Content-Type":"application/json"},body:JSON.stringify({prompt_file:"imagesys.txt",prompt_text:""})})).ok)throw new Error("Failed to change prompt to imagesys.txt");g=!0,currentPromptFile="imagesys.txt"}}else g&&(g=!1,currentPromptFile="");const t=await fetch("/fetch_response",{method:"POST",headers:{"Content-Type":"application/json"},body:JSON.stringify({message:e})});if(!t.ok)throw new Error("Failed to fetch response from chat server");const s=await t.json();f("Nadia",s.response.replace(/\n/g,"<br>"),"assistant"),s.image_url&&function(e,t){const s=document.createElement("div");s.className=`message ${t}`;const o=document.createElement("img");o.src=e,o.alt="Assistant Response Image",o.style.maxWidth="70%",o.style.height="70%",o.style.borderRadius="25px",s.appendChild(o),n.appendChild(s),n.scrollTop=n.scrollHeight}(s.image_url,"assistant")}catch(e){console.error("Error sending message:",e),alert(`Failed to send message. Error: ${e.message}`)}finally{setTimeout((()=>{u=!1,t.disabled=!1,s.disabled=!1}),0)}}}function f(e,t,s){const o=document.createElement("div");o.className="Nadia"===e?"assistant-container":"user-container";const a=document.createElement("div");a.className=`message ${s}`;const r=document.createElement("strong");r.className="username",r.textContent=`${e}: `,a.appendChild(r);const l=document.createElement("span"),i=/```([\s\S]*?)```/g;let c=t.replace(i,((e,t)=>`<div class="code-container"><code>${t.trim().replace(/\n/g,"<br>")}</code></div>`));l.innerHTML=c,a.appendChild(l),o.appendChild(a);let p=d.get(t)||0;if("Nadia"===e){const e=document.createElement("i");e.className="fas fa-sync regenerate-icon",p>=3&&(e.style.pointerEvents="none",e.classList.add("disabled")),e.addEventListener("click",(async()=>{if(p>=3)return;e.style.pointerEvents="none";const s=o;try{const n=await fetch("/regenerate_response",{method:"POST",headers:{"Content-Type":"application/json"}});if(!n.ok)throw new Error("Failed to regenerate response.");let o=(await n.json()).response;o=o.replace(i,((e,t)=>`<div class="code-container"><code>${t.trim().replace(/\n/g,"<br>")}</code></div>`)),s.querySelector("span").innerHTML=o,p++,d.set(t,p),p>=2&&(e.style.pointerEvents="none",e.classList.add("disabled"))}catch(e){console.error("Error regenerating response:",e),alert(`Failed to regenerate response. Error: ${e.message}`)}finally{e.style.pointerEvents="auto",e.classList.remove("fa-spin")}})),o.appendChild(e)}n.appendChild(o),MathJax.typeset(),n.scrollTop=n.scrollHeight}o.addEventListener("click",(()=>{r.style.display="block"})),a.addEventListener("click",(()=>{r.style.display="block"})),l.addEventListener("click",(()=>{r.style.display="none"})),y.addEventListener("change",(()=>{"cli"===y.value?(document.querySelector('link[href="static/styles_url/global.css"]').href="static/styles_url/cli.css",o.style.display="none",a.style.display="block"):(document.querySelector('link[href="static/styles_url/cli.css"]').href="static/styles_url/global.css",o.style.display="block",a.style.display="none")})),m.addEventListener("change",h),p.addEventListener("click",(async()=>{try{if(!(await fetch("/reset_prompt",{method:"POST",headers:{"Content-Type":"application/json"}})).ok)throw new Error("Failed to reset conversation history and custom prompt");m.value="prompt.txt",i.value="",r.style.display="none",h(),alert("Conversation history and custom prompt reset successfully!")}catch(e){console.error("Error resetting conversation history and custom prompt:",e),alert("Failed to reset conversation history and custom prompt. Please try again later.")}})),c.addEventListener("click",(async()=>{const e=i.value.trim(),t=m.value;if("prompt.txt"!==t&&"custom"!==t||"custom"===t&&e.length>0)try{await fetch("/reset_prompt",{method:"POST",headers:{"Content-Type":"application/json"}});if(!(await fetch("/change_prompt",{method:"POST",headers:{"Content-Type":"application/json"},body:JSON.stringify({prompt_file:t,prompt_text:e})})).ok)throw new Error("Failed to update system prompt");console.log("Custom Prompt Submitted:",e.length>0?e:t),r.style.display="none",i.value="",alert("System prompt updated successfully!")}catch(e){console.error("Error updating system prompt:",e),alert("Failed to update system prompt. Please try again later.")}else alert("Please enter a prompt or select a preset before submitting.")})),e.addEventListener("submit",(async e=>{e.preventDefault(),u||await E()})),t.addEventListener("keydown",(e=>{"Enter"!==e.key||e.shiftKey||u||(e.preventDefault(),E())}))}));